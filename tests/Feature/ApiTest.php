<?php

namespace Tests\Feature;

//use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\User;
use App\Models\Video;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class ApiTest extends TestCase
{
    use WithFaker;

    /**
     * @var string|\Laravel\Sanctum\string
     */
    protected string $token;
    protected Video $video;

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::beginTransaction();
        $email = $this->faker->safeEmail();
        $password = "password";

        /**
         * @var User $user
         */
        $user = User::factory(
            [
                'first_name' => $this->faker->firstName(),
                'last_name' => $this->faker->lastName(),
                'email' => $email,
                'password' => Hash::make($password),
            ]
        )->create();

        $this->token = $user->createToken('ApiToken')->plainTextToken;

        $this->video = Video::factory()->create();
    }

    /**
     * Get all videos.
     *
     * @return void
     */
    public function test_get_all_videos_successful_response()
    {
        $response = $this->get('/api/v1/videos', [
            'Authorization' => 'Bearer ' . $this->token,
            'perPage' => 10,
            'page' => 1,
        ]);

        $response->assertStatus(200);
    }

    /**
     * Get all audits by video.
     *
     * @return void
     */
    public function test_get_audits_by_video_successful_response()
    {
        $response = $this->get('/api/v1/videos/' . $this->video->id . '/audits',
            [
                'Authorization' => 'Bearer ' . $this->token,
                'perPage' => 10,
                'page' => 1,
            ]);

        $response->assertStatus(200);
    }

    /**
     * @return void
     */
    public function test_get_video_successful_response()
    {
        $response = $this->get('/api/v1/videos/' . $this->video->id,
            [
                'Authorization' => 'Bearer ' . $this->token
            ]);

        $response->assertStatus(200);
    }

    /**
     * Get all videos.
     *
     * @return void
     */
    public function test_get_all_search_terms_successful_response()
    {
        $response = $this->get('/api/v1/search-terms', [
            'Authorization' => 'Bearer ' . $this->token,
            'perPage' => 10,
            'page' => 1,
        ]);

        $response->assertStatus(200);
    }

    /**
     * @return void
     */
    protected function tearDown(): void
    {
        DB::rollBack();
    }

}
